/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package colorchooser;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.event.*;
import javax.swing.text.Document;

/**
 *
 * @author 01699728
 */
public class ColorChooser extends javax.swing.JPanel implements ChangeListener, ActionListener   {
    private Vector listeners;
 
    
    /**
     * Creates new form ColorChooser
     */
  
    public ColorChooser() {
        initComponents();
        sldRed.addChangeListener(this);
        sldGreen.addChangeListener(this);
        sldBlue.addChangeListener(this);
        txtRed.addActionListener(this);
        txtBlue.addActionListener(this);
        txtGreen.addActionListener(this);
        btnDone.addActionListener(this);
        
        listeners = new Vector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sldRed = new javax.swing.JSlider();
        sldGreen = new javax.swing.JSlider();
        sldBlue = new javax.swing.JSlider();
        lblRed = new javax.swing.JLabel();
        lblGreen = new javax.swing.JLabel();
        lblBlue = new javax.swing.JLabel();
        btnDone = new javax.swing.JButton();
        txtRed = new jintegerfield.JColorField();
        txtGreen = new jintegerfield.JColorField();
        txtBlue = new jintegerfield.JColorField();

        sldRed.setMajorTickSpacing(50);
        sldRed.setMaximum(255);
        sldRed.setMinorTickSpacing(10);
        sldRed.setPaintLabels(true);
        sldRed.setPaintTicks(true);
        sldRed.setValue(0);

        sldGreen.setMajorTickSpacing(50);
        sldGreen.setMaximum(255);
        sldGreen.setMinorTickSpacing(10);
        sldGreen.setPaintLabels(true);
        sldGreen.setPaintTicks(true);
        sldGreen.setValue(0);

        sldBlue.setMajorTickSpacing(50);
        sldBlue.setMaximum(255);
        sldBlue.setMinorTickSpacing(10);
        sldBlue.setPaintLabels(true);
        sldBlue.setPaintTicks(true);
        sldBlue.setValue(0);

        lblRed.setText("Red");
        lblRed.setOpaque(true);
        lblRed.setPreferredSize(new java.awt.Dimension(45, 25));
        lblRed.setRequestFocusEnabled(false);

        lblGreen.setText("Green");
        lblGreen.setOpaque(true);
        lblGreen.setPreferredSize(new java.awt.Dimension(45, 25));
        lblGreen.setRequestFocusEnabled(false);

        lblBlue.setText("Blue");
        lblBlue.setOpaque(true);
        lblBlue.setPreferredSize(new java.awt.Dimension(45, 25));
        lblBlue.setRequestFocusEnabled(false);

        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        txtRed.setText("jColorField1");
        txtRed.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtRedPropertyChange(evt);
            }
        });

        txtGreen.setText("jColorField2");

        txtBlue.setText("jColorField3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblGreen, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblRed, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                    .addGap(10, 10, 10)))
                            .addComponent(lblBlue, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRed, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(txtGreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBlue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sldRed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sldBlue, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(sldGreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnDone, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(sldRed, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sldGreen, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(sldBlue, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                        .addGap(9, 9, 9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 0, Short.MAX_VALUE)
                .addComponent(btnDone))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        
        
    }//GEN-LAST:event_btnDoneActionPerformed

    private void txtRedPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtRedPropertyChange

    }//GEN-LAST:event_txtRedPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDone;
    private javax.swing.JLabel lblBlue;
    private javax.swing.JLabel lblGreen;
    private javax.swing.JLabel lblRed;
    private javax.swing.JSlider sldBlue;
    private javax.swing.JSlider sldGreen;
    private javax.swing.JSlider sldRed;
    private jintegerfield.JColorField txtBlue;
    private jintegerfield.JColorField txtGreen;
    private jintegerfield.JColorField txtRed;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stateChanged (ChangeEvent ce) {
        
      int r = sldRed.getValue();
      int g = sldGreen.getValue();
     int b = sldBlue.getValue();

      this.colorText(r,g,b);
      
     
     Color color = new Color(r,g,b);
    fireColorEvent(new ColorEvent(this, color));
    }
    
    private void fireColorEvent(ColorEvent colorEvent){
        Vector v; 
        synchronized(this){
            v = (Vector) listeners.clone();
        }
        int size = v.size();
        for(int i=0; i<size; i++){
            ColorListener colorListener = (ColorListener)v.elementAt(i);
            colorListener.changeColor(colorEvent);
        }
    }
    public void addColorListener(ColorListener colorListener){
        listeners.addElement(colorListener);
      
    }
    
    public void removeColorListener(ColorListener colorListener){
        listeners.removeElement(colorListener);
    }
    public void colorText(int r, int g, int b){
       txtRed.setText(Integer.toString(r));
      txtBlue.setText(Integer.toString(b));
      txtGreen.setText(Integer.toString(g));
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        Object source = ae.getSource();
        if(source == btnDone){
             
             int r = sldRed.getValue();
             int g = sldGreen.getValue();
             int b = sldBlue.getValue();
             String hexvalue = this.getColor(r, g, b);
  
             
          
        }    else {
            this.slideValue();
        
        }
    
    }
        public void slideValue(){
            sldRed.setValue(Integer.parseInt(txtRed.getText()));
            sldGreen.setValue(Integer.parseInt(txtGreen.getText()));
            sldBlue.setValue(Integer.parseInt(txtBlue.getText()));
        
        }
        public String getColor(int r, int g, int b){
            StringBuilder builder = new StringBuilder();
            builder.append(Integer.toHexString(r));
            builder.append(Integer.toHexString(g));
            builder.append(Integer.toHexString(b));
            String hexvalue = builder.toString();
            return hexvalue;
        }
       // public String getText(String hexvalue){
        // ColorChooser cc = new ColorChooser();
        //   cc.setVisible(true);
        //    StringBuilder builder = new StringBuilder();
        //   builder.append("\n<html> ");
          //builder.append("<font color=' ");
         // builder.append(hexvalue);
          ///builder.append("'>text</font></html");
          //String text = builder.toString();
           // return text;
        
       // }


//       public int getGreen(){
//       int green = sldRed.getValue();
//       return green;
//       
//       }
//       public int getRed(){
//       int red = sldRed.getValue();
//       return red;
//       }
//       public int getBlue(){
//       int blue = sldRed.getValue();
//       return blue;
//       
//       }
}
